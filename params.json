{"name":"fnqueue","body":"# fnqueue ![project status](http://dl.dropbox.com/u/2208502/maintained.png)\r\n\r\nA nodejs powerful utility for function chaining (inspired by [async](https://github.com/caolan/async)).\r\n\r\n## Engine\r\n\r\n- nodejs v0.4.12+ (tested with v0.6.x)\r\n\r\n## Installation with npm\r\n\r\n    $ npm install fnqueue\r\n\r\n## Syntax\r\n\r\n```javascript\r\nnew FnQueue(functionsList[, callback, concurrencyLevel, isStopped]);\r\n```\r\n## Parameters\r\n\r\n1. `functionsList` __(Object)__ a list of Functions. Each function can declare implicit dependencies as arguments and assume you provide a single callback as the last argument.\r\n2. `callback` __(Function(err, data))__ the complete callback in the conventional form of `function (err, data) { ... }`\r\n3. `concurrencyLevel` __(Number/String: defaults to 'auto')__ the concurrency level of the chain execution, can be `'auto'` or `N* = { 1, 2, ... }`\r\n4. `isStopped` __(Boolean: defaults to false)__ if true you must call the start method in order to execute the function list.\r\n\r\n## Methods\r\n\r\n* __start__: will start the execution, used in combination with `isStopped = true` constructor parameter\r\n\r\n## Attributes\r\n\r\n* __isVerbose__ _(Boolean)_: will change the instance verbose mode\r\n\r\n## Notes\r\n\r\nFnQueue runs a list of functions, each passing their results to the dependent function in the list. However, if any of the functions pass an error to the callback, the next function is not executed and the main callback is immediately called with the error.\r\n\r\nEach dependency/argument must be named with the label of the dependent function in the `functionsList` (the first constructor argument).\r\nEach function with a dependency will be called with the result of the dependent function as expected. __(Introspection by [introspect](https://github.com/kilianc/introspect))__\r\n\r\nThe global callback is called once, on the first error or at the end of the execution. A data object will be provided with the indexed result of the functions.\r\n\r\nFnQueue magically resolves all dependencies and executes functions in the right order with the provided concurrency level.\r\n\r\n## Example\r\n\r\n```javascript\r\nvar FnQueue = require('fnqueue');\r\n```\r\nor for a verbose mode:\r\n\r\n```javascript\r\nvar FnQueue = require('fnqueue').verbose();\r\n```\r\nExample:\r\n\r\n```javascript\r\nnew FnQueue({\r\n  // this will wait for 'processSomething' and 'searchSomething' and will be called with the respective results\r\n  funnyStuff: function (processSomething, searchSomething, callback) {\r\n    // do something silly\r\n    callback(null, 'ciao!');\r\n  },\r\n  // this will be called instantly\r\n  searchSomething: function (callback) {\r\n    // do something with database\r\n    callback(err, results);\r\n  },\r\n  // this will wait 'searchSomething'\r\n  update: function (searchSomething, callback) {\r\n    // change values inside results and save to db\r\n    callback(err); // no needs to return values\r\n  },\r\n  // this will wait 'searchSomething'\r\n  processSomething: function (searchSomething, callback) {\r\n    var start = new Date().getTime();\r\n    // do something slow\r\n    var elapsedTime = new Date().getTime() - start;\r\n    callback(err, elapsedTime);\r\n  }]\r\n}, function (err, data) {\r\n\r\n  if (err) {\r\n    throw err;\r\n  }\r\n\r\n  console.log(data.searchSomething);  // results\r\n  console.log(data.update);           // undefined\r\n  console.log(data.processSomething); // elapsedTime\r\n  console.log(data.funnyStuff);       // 'ciao!'\r\n}, 1);\r\n```\r\n\r\n## Test\r\n\r\nTests depends on http://vowsjs.org/ then\r\n\r\n    npm install -g vows\r\n    npm install\r\n    npm test\r\n\r\n![tests](http://f.cl.ly/items/03432M3A0l0r3M142B2w/fnqueue_test_v2.0.2.png)\r\n\r\n## License\r\n\r\n_This software is released under the MIT license cited below_.\r\n\r\n    Copyright (c) 2010 Kilian Ciuffolo, me@nailik.org. All Rights Reserved.\r\n\r\n    Permission is hereby granted, free of charge, to any person\r\n    obtaining a copy of this software and associated documentation\r\n    files (the 'Software'), to deal in the Software without\r\n    restriction, including without limitation the rights to use,\r\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the\r\n    Software is furnished to do so, subject to the following\r\n    conditions:\r\n    \r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n    \r\n    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n    OTHER DEALINGS IN THE SOFTWARE.","tagline":"A nodejs powerful utility for function chaining","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}